[ -f "$HOME/.profile" ] && source "$HOME/.profile"
[ -f "$HOME/.aliases" ] && source "$HOME/.aliases"
[ -f "$HOME/scripts/colour/shell" ] && source "$HOME/scripts/colour/shell"

## Options

# Navigation
setopt AUTO_PUSHD           # cd pushes old directory to the stack
setopt PUSHD_IGNORE_DUPS    # push only unique directories
setopt PUSHD_SILENT         # don't print directory stach when pushing or popping
setopt PUSHD_TO_HOME        # push with no arguements pushes to home

# Globbing and fds
setopt EXTENDED_GLOB        # treat '#', '~' and '^' as part of patterns for filename generation

# Prompt
setopt PROMPT_SUBST         # substitutions can be used in the prompt

# Environment
setopt AUTO_RESUME          # single work commands can resume existing jobs
setopt LONG_LIST_JOBS       # list jobs in the long format by default
unsetopt BG_NICE            # don't run background jobs at a lower priority
unsetopt HUP                # don't send hang-up signal when exiting the shell
unsetopt CHECK_JOBS         # don't report status of background jobs when exiting

# History
HISTFILE="$XDG_CACHE_HOME/.zhistory"
HISTSIZE=10000
SAVEHIST=10000
setopt EXTENDED_HISTORY     # prepend timestamp to each history entry
setopt INC_APPEND_HISTORY   # history entries are appended after each command
setopt SHARE_HISTORY        # imports commands from and writes commands to the history file
setopt HIST_IGNORE_DUPS     # don't add command to history if it's a duplicate of the previous entry
setopt HIST_IGNORE_ALL_DUPS # remove previous entry from history and append command to the end
setopt HIST_IGNORE_SPACE    # ignore commands prepended with a space
setopt HIST_SAVE_NO_DUPS    # older history commands are removed in favour of newer ones
setopt HIST_VERIFY          # perform history expansion and reload line into the editing buffer

# Completion
setopt ALWAYS_TO_END        # move cursor to end of word when inserting completion
setopt PATH_DIRS            # perform path search completion on commands with slashes
unsetopt CASE_GLOB          # don't make globbing completion case sensitive
unsetopt MENU_COMPLETE      # don't insert first completion match immediately


## Keybindings

# Use Vim mode
bindkey -v

# Normal mode keybindings
bindkey '^[[3~' delete-char         # delete
bindkey '^?' backward-delete-char   # backspace
bindkey '^[[D' backward-char        # left
bindkey '^[[C' forward-char         # right
bindkey '^[[7~' beginning-of-line   # home
bindkey '^[[8~' end-of-line         # end
bindkey '^[[2~' overwrite-mode      # insert
bindkey '[D' backward-word          # alt+left
bindkey '[C' forward-word           # alt+right
bindkey '^[[1;5D' backward-word     # ctrl+left
bindkey '^[[1;5C' forward-word      # ctrl+right
bindkey '^[Od' backward-word        # ctrl+left
bindkey '^[Oc' forward-word         # ctrl+right
bindkey '^[[3^' kill-word           # ctrl+delete
bindkey '^H' backward-kill-word     # ctrl+backspace
bindkey '^A' beginning-of-line      # ctrl+a
bindkey '^E' end-of-line            # ctrl+e
bindkey '^L' clear-screen           # ctrl+l
bindkey '^K' kill-line              # ctrl+k
bindkey '^U' backward-kill-line     # ctrl+u
bindkey '^T' transpose-chars        # ctrl+t
bindkey '^F' vi-cmd-mode            # ctrl+f
bindkey '^B' push-line-or-edit      # ctrl+b
bindkey '^I' expand-or-complete     # ctrl+i
bindkey '^Y' yank                   # ctrl+y
bindkey ' ' magic-space             # space
bindkey '^P' up-history             # ctrl+p
bindkey '^N' down-history           # ctrl+n
bindkey '^R' history-incremental-search-backward    # ctrl+r
bindkey '^[[Z' reverse-menu-complete                # shift+tab

# Vim mode keybindings
bindkey -M vicmd '/' history-incremental-search-backward
bindkey -M vicmd '?' history-incremental-search-forward
bindkey -M vicmd 'v' edit-command-line
bindkey -M vicmd 'u' undo
bindkey -M vicmd '^R' redo

# Reduce the default timeout
export KEYTIMEOUT=10


## Completions

# group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# directories
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'expand'
zstyle ':completion:*' squeeze-slashes true

# enable caching
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path "$XDG_CACHE_HOME/.zcompcache"

# ignore useless commands and functions
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec)|prompt_*)'

# completion sorting
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# history
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes


## Prompt

function left_prompt {
    local current_directory="%F{blue}%1~"
    local command_status="%(0?.%F{green}.%F{red})$%f"
    print "$current_directory $command_status "
}

function right_prompt {
    if [ "$KEYMAP" = 'vicmd' ]; then
        print "%F{yellow} [% NORMAL]% %f"
    fi
}

function zle-line-init zle-line-finish zle-keymap-select {
    zle reset-prompt
    zle -R
}

function prompt_precmd {
    zle -N zle-line-init
    zle -N zle-keymap-select
    zle -N zle-line-finish
    PROMPT='$(left_prompt)'
    RPROMPT='$(right_prompt)'
}

if [[ ! ${TERM} == (linux|*bsd*|dumb) ]]; then
    autoload -Uz promptinit && promptinit
    autoload -Uz add-zsh-hook && add-zsh-hook precmd prompt_precmd
    prompt_opts=(cr subst percent)
fi


## Libraries

# Completions
if [ -d "$DOTFILES_HOME/libs/zsh-completions" ]; then
    source "$DOTFILES_HOME/libs/zsh-completions/zsh-completions.plugin.zsh"
    autoload -Uz compinit && compinit -d "$XDG_CACHE_HOME/.zcompcache"
fi

# History substring search
if [ -d "$DOTFILES_HOME/libs/zsh-history-substring-search" ]; then
    source "$DOTFILES_HOME/libs/zsh-history-substring-search/zsh-history-substring-search.zsh"
    bindkey '^[[A' history-substring-search-up
    bindkey '^[OA' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
    bindkey '^[OB' history-substring-search-down
    bindkey -M vicmd 'k' history-substring-search-up
    bindkey -M vicmd 'j' history-substring-search-down
fi

# Fuzzy command line search
if [ -d "$DOTFILES_HOME/libs/fzf" ]; then
    export PATH="$DOTFILES_HOME/libs/fzf/bin:$PATH"
    export MANPATH="$DOTFILES_HOME/libs/fzf/man:$MANPATH"
    source "$DOTFILES_HOME/libs/fzf/shell/completion.zsh" > /dev/null 2>&1
fi

# Enhancd
if [ -f "$DOTFILES_HOME/libs/enhancd/init.sh" ]; then
    source "$DOTFILES_HOME/libs/enhancd/init.sh"
fi


## OS specific settings

if [ "$(uname)" = "Linux" ]; then
    # GPG
    export GPG_TTY=$(tty)
    gpg-connect-agent updatestartuptty /bye >/dev/null

    # Rust
    export RUST_SRC_PATH="$RUSTUP_HOME/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"

    # Android SDK/NDK
    export JAVA_HOME="/opt/java/jdk"
    export PATH="$PATH:$JAVA_HOME/bin"

elif [ "$(uname)" = "Darwin" ]; then
    # GPG Agent
    if [ -f "$HOME/.gnupg/gpg-agent-info" ]; then
        source "$HOME/.gnupg/gpg-agent-info"
    fi

    # GPG
    export GPG_TTY=$(tty)
    if [ -S "${GPG_AGENT_INFO%%:*}" ]; then
        export GPG_AGENT_INFO
    fi

    # Ruby 
    if type rbenv > /dev/null 2>&1; then
        eval "$(rbenv init -)"
    fi

    export BROWSER='open'

    # OpenSSL
    export OPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include
    export DEP_OPENSSL_INCLUDE=/usr/local/opt/openssl/include

    # Rust
    export RUST_SRC_PATH="$RUSTUP_HOME/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src"

    # Android SDK/NDK
    export ANT_ROOT=/usr/local/Cellar/ant/1.9.7/bin
    export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home
    export PATH="$PATH:$JAVA_HOME/bin"
fi

# De-duplicate array paths
typeset -gU cdpath fpath mailpath path

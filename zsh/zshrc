# Interactive environment variables
export BROWSER=open
export EDITOR=vim
export PAGER=less
export LESSHISTFILE=-

# Setup prompt
PROMPT='%B%F{cyan}%1~%f%b %(?.%F{green}.%F{red})%(!.#.$)%f '

# Keybindings
bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search
bindkey '^P' up-line-or-search
bindkey '^N' down-line-or-search
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^F' forward-char
bindkey '^B' backward-char
bindkey '^[f' forward-word
bindkey '^[b' backward-word
bindkey '^K' kill-line
bindkey '^U' backward-kill-line
bindkey '^Y' yank
bindkey '^[^?' backward-kill-word

# Enable line editor
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line
bindkey -M vicmd '^V' edit-command-line

# Disable timeout when changing vi mode
KEYTIMEOUT=1

# Display right prompt when in vi command mode
function zle-line-init zle-keymap-select {
    if [ "$KEYMAP" = vicmd ]; then
        RPS1='-- NORMAL --'
    else
        RPS1=''
    fi
    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select

# Enable completions
autoload -Uz compinit && compinit
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Remove duplicate entries from path
typeset -U path manpath infopath

# Homebrew: the missing package manager for macOS
# https://brew.sh
path=("/opt/homebrew/bin" $path)
if (( $+commands[brew] )); then
    export HOMEBREW_NO_ANALYTICS=1
    export HOMEBREW_NO_AUTO_UPDATE=1
    export HOMEBREW_BUNDLE_FILE="$DOTFILES_HOME/mac/Brewfile"

    # Configure shell and set HOMEBREW_PREFIX
    eval "$(brew shellenv)"
fi

# fzf: general-purpose command-line fuzzy finder
# https://github.com/junegunn/fzf
if (( $+commands[fzf] )); then
    export FZF_TMUX=1

    # Auto-completion
    if [[ $- == *i* ]]; then
        source "$HOMEBREW_PREFIX/opt/fzf/shell/completion.zsh" 2>/dev/null
    fi

    # Key bindings
    source "$HOMEBREW_PREFIX/opt/fzf/shell/key-bindings.zsh"

    # ripgrep: line-oriented search tool
    # https://github.com/BurntSushi/ripgrep
    if (( $+commands[rg] )); then
        export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
    fi

    function preview() {
        if (( $+commands[bat] )); then
            fzf --preview 'bat --style=full --color=always {}'
        else
            fzf --preview 'cat {}'
        fi
    }
fi

# zoxide: smarter cd command
# https://github.com/ajeetdsouza/zoxide
if (( $+commands[zoxide] )); then
    eval "$(zoxide init zsh)"
fi

# gpgconf: utility to configure GnuPG
# https://www.gnupg.org/documentation/manuals/gnupg/gpgconf.html
if (( $+commands[gpgconf] )); then
    export GPG_TTY="$(tty)"
    gpgconf --launch gpg-agent
fi

# Android development
if [ -d '/Applications/Android Studio.app' ]; then
    export JAVA_HOME='/Applications/Android Studio.app/Contents/jre/Contents/Home'
    path=($path "$HOME/Library/Android/sdk/platform-tools")
fi

# List directory contents
alias ls='ls -G'
alias ll='ls -lhF --color=auto'
alias la='ls -lahF --color=auto'

# Function abbreviations
alias f=finder
alias ql=quick-look
alias manp=man-preview

# Clear the clipboard
function pbclear() {
    printf '' | pbcopy
}

# bat: a cat clone with syntax highlighting and Git integration
# https://github.com/sharkdp/bat
if (( $+commands[bat] )); then
    alias cat=bat
fi

# Prevent nested ranger sessions
function ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        command ranger "$@"
    else
        exit
    fi
}

# Create a new directory and automatically naviate there
function mkcd() {
    mkdir -p "$@" && cd "$_"
}

# Open the given directories in Finder, or the current directory if empty
function finder() {
    open "${@:-.}" &>/dev/null
}

# View a file or directory in QuickLook.app
function quick-look() {
    (( $# > 0 )) && qlmanage -p $* &>/dev/null &
}

# View a man page in Preview.app
function man-preview() {
    man -w "$@" &>/dev/null && man -t "$@" | open -f -a Preview || man "$@"
}

# Remove .DS_Store files recursively in a directory, default .
function dspurge() {
    find "${@:-.}" -type f -name .DS_Store -delete
}

# Remove node_modules directories recursively in a directory, default .
function nmpurge() {
    find "${@:-.}" -type d -name node_modules -prune -exec rm -rf '{}' +
}

# Start a simple fileserver
function serve() {
    python3 -m http.server "$@"
}

# Encrypt a file to myself using GPG
function encrypt() {
    gpg --encrypt --recipient ryan@rypac.org --armour --output - "$@"
}

# Decrypt a GPG encrypted file
function decrypt() {
    gpg --decrypt --quiet "$@"
}

# Reset currently active YubiKey
function reset-yubikey() {
    gpg-connect-agent 'scd serialno' 'learn --force' /bye
}

# Run a Haskell script in Cabal or Stack
function haskell-script() {
    if [ ! -f "$1" ]; then
        return 1
    fi

    case "$(head -1 "$1")" in
        '#!/usr/bin/env cabal'|'{- cabal:')
            cabal run -v0 "$@" ;;
        '#!/usr/bin/env stack')
            stack --silent "$@" ;;
        '-- stack script'*|'{- stack script'*)
            stack --silent =(cat <(echo '#!/usr/bin/env stack') "$1") "${@:2}" ;;
        *)
            stack --silent --resolver lts script "$@" ;;
    esac
}

# Wrapper to create or attach to default tmux session
function tmux() {
    if [ $# -eq 0 ]; then
        command tmux attach -t default 2&>/dev/null || command tmux new -s default
    else
        command tmux "$@"
    fi
}

# Load plugins
for plugin (
    "$HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "$HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
); if [ -f "$plugin" ]; then
    source "$plugin"
else
    echo "Failed to load plugin $plugin"
fi

# Ensure local executable directory is first on path
path=("$XDG_BIN_HOME" $path)

# Source dotfiles management functions
. "$DOTFILES_HOME/dotfiles"

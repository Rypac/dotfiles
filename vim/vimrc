" Plugins {{{

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Features
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'justinmk/vim-sneak'
Plug 'matze/vim-move'
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'terryma/vim-multiple-cursors'
Plug 'christoomey/vim-tmux-navigator'

" Completion
Plug 'neomake/neomake'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Languages
Plug 'octol/vim-cpp-enhanced-highlight', { 'for': 'cpp' }
Plug 'rhysd/vim-clang-format', { 'for': 'cpp' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'keith/swift.vim', { 'for': 'swift' }
Plug 'elmcast/elm-vim', { 'for': 'elm' }
Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }
Plug 'eagletmt/neco-ghc', { 'for': 'haskell' }
Plug 'mpickering/hlint-refactor-vim', { 'for': 'haskell' }
Plug 'alx741/vim-hindent', { 'for': 'haskell' }
Plug 'Twinside/vim-hoogle', { 'for': 'haskell' }
Plug 'raichoo/purescript-vim', { 'for': 'purescript' }
Plug 'frigoeu/psc-ide-vim', { 'for': 'purescript' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'javascript' }
Plug 'quabug/vim-gdscript', { 'for': 'gdscript' }
Plug 'dag/vim-fish', { 'for': 'fish' }
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }

" Visual/themes
Plug 'chriskempson/base16-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

" }}}

" Plugin configuration {{{

" netrw
let g:netrw_liststyle = 3

" Neomake
autocmd! BufWritePost * Neomake

" Deoplete
let g:deoplete#enable_at_startup = 1

" GitGutter
let g:gitgutter_eager = 1
let g:gitgutter_realtime = 1
let g:gitgutter_sign_column_always = 1
let g:gitgutter_override_sign_column_highlight = 0

" Rust
let g:rustfmt_autosave = 1

" Haskell
let g:haskell_indent_disable = 1
let g:hindent_line_length = 80
let g:haskellmode_completion_ghc = 0
let g:necoghc_enable_detailed_browse = 1
let g:hlintRefactor#disableDefaultKeybindings = 1

" Purescript
let g:purescript_indent_if = 2
let g:purescript_indent_case = 2
let g:purescript_indent_let = 2
let g:purescript_indent_where = 2
let g:purescript_indent_do = 2

" Elm
let g:elm_detailed_complete = 1
let g:elm_format_autosave = 1
let g:elm_setup_keybindings = 0
let g:elm_syntastic_show_warnings = 1

" Javascript
let g:javascript_plugin_flow = 1
let g:jsx_ext_required = 0

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'base16'

" ClangFormat
autocmd FileType c,cpp,objc ClangFormatAutoEnable
let g:clang_format#detect_file_style = 1
let g:clang_format#style_options = {
    \ "BasedOnStyle": "Google",
    \ "AccessModifierOffset": -2,
    \ "AlignAfterOpenBracket": "AlwaysBreak",
    \ "AlignOperands": "false",
    \ "AllowShortFunctionsOnASingleLine": "Empty",
    \ "AllowShortIfStatementsOnASingleLine": "false",
    \ "AllowShortLoopsOnASingleLine": "false",
    \ "BinPackArguments": "false",
    \ "BinPackParameters": "false",
    \ "BreakConstructorInitializersBeforeComma": "true",
    \ "ColumnLimit": 0,
    \ "ConstructorInitializerIndentWidth": 0,
    \ "IndentWidth": 4,
    \ "ObjCBlockIndentWidth": 4,
    \ "ObjCSpaceAfterProperty": "true",
    \ "ObjCSpaceBeforeProtocolList": "true",
    \ }

" }}}

" Options {{{

" UI
set number
set showmatch
set matchtime=2
set whichwrap+=h,l
set updatetime=500

" Searching
set ignorecase
set smartcase

" Tabs
set splitbelow
set splitright

" Always replace tabs with 4 spaces
retab
set expandtab
set shiftwidth=4
set tabstop=4

" Indentation
set smartindent
set wrap

" Ignore certain files and directories
set wildignore+=*.o,*~,*.pyc,*/.git/*,*/node_modules/*
set noswapfile

" Set language specific options
autocmd Filetype haskell setlocal tabstop=2 shiftwidth=2 omnifunc=necoghc#omnifunc
autocmd Filetype purescript setlocal tabstop=2 shiftwidth=2
autocmd Filetype javascript setlocal tabstop=2 shiftwidth=2
autocmd Filetype ruby setlocal tabstop=2 shiftwidth=2

" }}}

" Colour scheme {{{

if (has("termguicolors"))
    set termguicolors
endif

set background=dark
let base16colorspace=256
silent! colorscheme base16-oceanicnext
highlight LineNr ctermbg=black
highlight SignColumn ctermbg=black

" }}}

" Keybindings {{{

" Quick leader actions
let maplocalleader = "\\"
let mapleader = "\<space>"

" Disable highlight
nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<cr>
nnoremap <silent> <C-C> :nohlsearch<Bar>:echo<cr>
nnoremap <silent> <C-[> :nohlsearch<Bar>:echo<cr>
nnoremap <silent> <localleader><space> :noh<cr>

" Fast actions
nmap <localleader>w :write<cr>
nmap <localleader>x :exit<cr>
nmap <localleader>q :quit<cr>
nmap <localleader>Q :quitall<cr>
nmap <localleader>f :Files<cr>
nmap <localleader>b :Buffers<cr>
nmap <localleader>c :Commands<cr>
nmap <localleader>r :redraw!<cr>

" Window layer
nnoremap <leader>wj <C-W>j
nnoremap <leader>wk <C-W>k
nnoremap <leader>wh <C-W>h
nnoremap <leader>wl <C-W>l
nnoremap <leader>wJ <C-W>J
nnoremap <leader>wK <C-W>K
nnoremap <leader>wH <C-W>H
nnoremap <leader>wL <C-W>L
nnoremap <leader>ws :split<cr>
nnoremap <leader>wv :vsplit<cr>
nnoremap <leader>wns :new<cr>
nnoremap <leader>wnv :vnew<cr>
nnoremap <leader>wnj :rightbelow :split<cr>
nnoremap <leader>wnk :leftabove :split<cr>
nnoremap <leader>wnh :leftabove :vsplit<cr>
nnoremap <leader>wnl :rightbelow :vsplit<cr>
nnoremap <leader>w= <C-W>=
nnoremap <leader>w- :resize -5<cr>
nnoremap <leader>w+ :resize +5<cr>
nnoremap <leader>wq :quit<cr>

" Tab layer
nnoremap <leader>th :tabprevious<cr>
nnoremap <leader>tl :tabnext<cr>
nnoremap <leader>tH :tabfirst<cr>
nnoremap <leader>tL :tablast<cr>
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>tq :tabclose<cr>
nnoremap <leader>tm :tabmove<cr>

" Buffer layer
nnoremap <leader>bh :bprevious<cr>
nnoremap <leader>bl :bnext<cr>
nnoremap <leader>bH :bfirst<cr>
nnoremap <leader>bL :blast<cr>
nnoremap <leader>bq :bdelete<cr>
nnoremap <leader>bb :Buffers<cr>

" Git layer
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gg :Gbrowse<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gf :Gfetch<cr>
nnoremap <leader>gp :Gpull<cr>
nnoremap <leader>gt :terminal tig<cr>
nnoremap <leader>gh :terminal tig %<cr>

" Jump to definition/between headers
nnoremap <F2> gD
nnoremap <F4> :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<cr>

" fzf
nnoremap <F9> :Files<cr>
nnoremap <F10> :Buffers<cr>
nnoremap <C-p> :GFiles<cr>

" Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

" }}}

" Language specific layers {{{

" Haskell
au FileType haskell nnoremap <leader>hr :call ApplyOneSuggestion()<cr>
au FileType haskell nnoremap <leader>hR :call ApplyAllSuggestions()<cr>
au FileType haskell nnoremap <leader>ht :GhcModType<cr>
au FileType haskell nnoremap <leader>hT :GhcModTypeInsert<cr>
au FileType haskell nnoremap <leader>hc :Neomake ghcmod<cr>
au FileType haskell nnoremap <leader>hh :Hoogle<cr>
au FileType haskell nnoremap <leader>hH :Hoogle 
au FileType haskell nnoremap <leader>hi :HoogleInfo<cr>
au FileType haskell nnoremap <leader>hI :HoogleInfo 
au FileType haskell nnoremap <leader>hz :HoogleClose<cr>

" Purescript
au FileType purescript nnoremap <leader>hr :PSCIDEapplySuggestion<cr>
au FileType purescript nnoremap <leader>ht :PSCIDEtype<cr>
au FileType purescript nnoremap <leader>hT :PSCIDEaddTypeAnnotation<cr>
au FileType purescript nnoremap <leader>hi :PSCIDEimportIdentifier<cr>
au FileType purescript nnoremap <leader>hl :PSCIDEload<cr>
au FileType purescript nnoremap <leader>hd :PSCIDEgoToDefinition<cr>
au FileType purescript nnoremap <leader>hh :PSCIDEpursuit<cr>
au FileType purescript nnoremap <leader>hc :PSCIDEcaseSplit<cr>
au FileType purescript nnoremap <leader>hq :PSCIDEaddImportQualifications<cr>
au FileType purescript nnoremap <leader>hQ :PSCIDEremoveImportQualifications<cr>

" }}}

" vim:foldmethod=marker:foldlevel=0
